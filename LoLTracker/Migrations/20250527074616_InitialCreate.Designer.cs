// <auto-generated />
using System;
using LoLTracker.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LoLTracker.Migrations
{
    [DbContext(typeof(LeagueContext))]
    [Migration("20250527074616_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("LoLTracker.Models.Dto.BanDto", b =>
                {
                    b.Property<int>("ChampionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PickTurn")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChampionId", "PickTurn");

                    b.HasIndex("TeamId");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("LoLTracker.Models.Dto.MatchDto", b =>
                {
                    b.Property<long>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("GameDuration")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("GameEndTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("GameMode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GameResult")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("GameStartTimestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("GameId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("LoLTracker.Models.Dto.ParticipantDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Assists")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChampionName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DamageDealtToBuildings")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DamageDealtToChampions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Deaths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DetectorWardsPlaced")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GoldEarned")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kills")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MagicDamageDealt")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MatchId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PhysicalDamageDealt")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Puuid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RiotIdGameName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RiotIdTagLine")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamPosition")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalDamageDealt")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("LoLTracker.Models.Dto.TeamDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long?>("MatchDtoGameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Win")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MatchDtoGameId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("LoLTracker.Models.RiotAccountDetails", b =>
                {
                    b.Property<string>("Puuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("LeagueAccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RiotId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Puuid");

                    b.HasIndex("RiotId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("LoLTracker.Models.Dto.BanDto", b =>
                {
                    b.HasOne("LoLTracker.Models.Dto.TeamDto", null)
                        .WithMany("Bans")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoLTracker.Models.Dto.ParticipantDto", b =>
                {
                    b.HasOne("LoLTracker.Models.Dto.MatchDto", "Match")
                        .WithMany("Participants")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("LoLTracker.Models.Dto.TeamDto", b =>
                {
                    b.HasOne("LoLTracker.Models.Dto.MatchDto", null)
                        .WithMany("Teams")
                        .HasForeignKey("MatchDtoGameId");
                });

            modelBuilder.Entity("LoLTracker.Models.Dto.MatchDto", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("LoLTracker.Models.Dto.TeamDto", b =>
                {
                    b.Navigation("Bans");
                });
#pragma warning restore 612, 618
        }
    }
}
